# Projeto de Gamifica√ß√£o - Back-end üéâ

Este projeto √© baseado na proposta de "gamifica√ß√£o" do conte√∫do da mat√©ria de Back-end. Ele ser√° desenvolvido em **4 etapas**, conforme detalhado abaixo.

---

## Entregas do Projeto

### Etapas:

1. **Primeira Etapa:**
   - Criar um **Diagrama de Classes (UML)** com todas as classes necess√°rias para o game.  
   - O diagrama deve conter:
     - Classes, atributos e m√©todos seguindo as regras do UML.
   - **Dica:** Use ferramentas como [Miro](https://miro.com/) para desenhar o diagrama.

2. **Segunda Etapa:**
   - Criar o **c√≥digo das classes, servidor e rotas**, de acordo com o diagrama desenvolvido.
   - Seguir o documento fornecido no anexo com as instru√ß√µes espec√≠ficas do grupo.

3. **Terceira Etapa:**
   - **Copiar os arquivos** do reposit√≥rio do professor para o reposit√≥rio do grupo.
   - Criar a pasta `terceiraEtapa`:
     - **Comentar as linhas** que voc√™ n√£o compreende no c√≥digo.
     - Refazer o **Diagrama de Classe (UML)** com base no c√≥digo fornecido pelo professor.
     - Implementar as 4 rotas existentes (CRUD) relacionadas aos cadastros.

4. **Quarta Etapa:**
   - Configurar o **Postman**:
     - Testar e validar as rotas de cadastro.
   - √öltima oportunidade para ajustar o Diagrama UML, Classes e Rotas conforme orienta√ß√µes do professor.
   - **Dica:** Documentar melhorias no `README.md` e na pasta `anexos`.

---

## Informa√ß√µes do Grupo

- **N√∫mero da Etapa:** Estamos na etapa 4  
- **N√∫mero do Grupo:** Somos os grupos 6
- **Arquivo Respons√°vel:** **Classe Dev e Sabotador** (UML, valida√ß√µes e c√≥digo)

### **Detalhes das Classes**

#### Classe **Dev**
- **Atributos**:
  - **grupo**: `Number` (herdado de `Aluno`)
  - **nome**: `String` (herdado de `Aluno`)
  - **apelido**: `String` (herdado de `Aluno`)
  - **senha**: `String` (herdado de `Aluno`)
  - **estaVivo**: `Boolean` (herdado de `Aluno`)
  - **localAtual**: `String` (Valor inicial: `"Recep√ß√£o"`, sobrescrito na classe `Dev`)
- **M√©todo**:
  - **mostrarPapel()**: Retorna uma string indicando que o jogador √© um "Dev" com objetivo de resolver problemas backend no SENAI.

#### Classe **Sabotador**
- **Atributos**:
  - **grupo**: `Number` (herdado de `Aluno`)
  - **nome**: `String` (herdado de `Aluno`)
  - **apelido**: `String` (herdado de `Aluno`)
  - **senha**: `String` (herdado de `Aluno`)
  - **estaVivo**: `Boolean` (herdado de `Aluno`)
  - **localAtual**: `String` (Valor inicial: `"Recep√ß√£o"`, sobrescrito na classe `Sabotador`)
- **M√©todos**:
  - **mostrarPapel()**: Retorna uma string indicando que o jogador √© um "Sabotador" com o objetivo de atrapalhar os "DEVs".
  - **eliminar(alvo)**: Recebe um objeto `alvo` (um outro jogador) e retorna uma string indicando que o jogador foi eliminado pelo sabotador.

---

### **Integrantes e Contribui√ß√µes**

- **Integrante 1 (Nome):** _Descri√ß√£o do que foi feito._  
- **Integrante 2 (Nome):** _Descri√ß√£o do que foi feito._  
- **Integrante 3 (Nome):** _Descri√ß√£o do que foi feito._  
- **Integrante 4 (Nome):** _Descri√ß√£o do que foi feito._  
- **Integrante 5 (Nome):** _Descri√ß√£o do que foi feito._  
- **Integrante 6 (Nome):** _Descri√ß√£o do que foi feito._  
- **Integrante 7 (Nome):** _Descri√ß√£o do que foi feito._  

---

## Anexos e Evid√™ncias

- **Print do Diagrama UML:** (Imagem ou PDF anexado na pasta `anexos`)    
- **Reposit√≥rio GitHub:** [Link para o reposit√≥rio p√∫blico]  

---

**Observa√ß√£o:** Mantenha o projeto organizado e atualizado para facilitar o acompanhamento dos professores e o entendimento de todos os integrantes do grupo.
